#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram News ‚Üí Channel pipeline with human approval

–ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:
- –ó–±—ñ—Ä –Ω–æ–≤–∏–Ω —ñ–∑ –±—ñ–ª–∏—Ö RSS‚Äë–¥–∂–µ—Ä–µ–ª (—Ç–∞ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ –∑ HTML —á–µ—Ä–µ–∑ collectors_nonrss, —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–æ).
- –ß–µ—Ä–≥–∞ —É SQLite (—Å—Ç–∞—Ç—É—Å–∏: PENDING / APPROVED / REJECTED / PUBLISHED).
- –ö–∞—Ä—Ç–∫–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –≤ –∞–¥–º—ñ–Ω‚Äë—á–∞—Ç—ñ: ¬´–ü—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –∑–∞—Ä–∞–∑¬ª / ¬´–ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ 09:00¬ª / ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏¬ª / ¬´–í—ñ–¥—Ö–∏–ª–∏—Ç–∏¬ª.
- –ö–æ–º–∞–Ω–¥–∞ /search ‚Äî –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–æ–≤–∏–Ω–∏ —É —á–µ—Ä–∑—ñ –∑–∞ –¥–∞—Ç–æ—é –∞–±–æ –∑–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º –¥–∞—Ç.
- –ü–∞–Ω–µ–ª—å —à–≤–∏–¥–∫–∏—Ö –¥—ñ–π –ø—Ä–∏ –∑–≥–∞–¥—Ü—ñ –±–æ—Ç–∞ —É –≥—Ä—É–ø—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, @BotName): ¬´–ó—ñ–±—Ä–∞—Ç–∏ –∑–∞—Ä–∞–∑¬ª, ¬´–ü–æ–∫–∞–∑–∞—Ç–∏ —á–µ—Ä–≥—É¬ª, ¬´–ü–æ—à—É–∫ –∑–∞ –¥–∞—Ç–æ—é¬ª, –∞ —Ç–∞–∫–æ–∂ –∫–Ω–æ–ø–∫–∏ ¬´–°—å–æ–≥–æ–¥–Ω—ñ / –í—á–æ—Ä–∞ / 7 –¥–Ω—ñ–≤¬ª.
- –ö–æ–º–∞–Ω–¥–∞ /collect_range ‚Äî —Å–∫–∞–Ω—É—î HTML‚Äë–¥–∂–µ—Ä–µ–ª–∞ –±–µ–∑ RSS –∑–∞ –∑–∞–¥–∞–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç (—è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ non‚ÄëRSS –∫–æ–ª–µ–∫—Ç–æ—Ä).
- –©–æ–¥–µ–Ω–Ω–∏–π –∞–≤—Ç–æ–∑–±—ñ—Ä –æ 08:45 (Europe/Kyiv) + —Ä—É—á–Ω—ñ /collect, /review, /search, /collect_range.

–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è (—á–µ—Ä–µ–∑ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∞–±–æ `.env`):
- BOT_TOKEN ‚Äî —Ç–æ–∫–µ–Ω Telegram‚Äë–±–æ—Ç–∞.
- CHANNEL_ID ‚Äî ID –∞–±–æ @username –∫–∞–Ω–∞–ª—É, –∫—É–¥–∏ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ—Å—Ç–∏.
- TIMEZONE ‚Äî —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å (default: Europe/Kyiv).
- ADMIN_CHAT_ID ‚Äî ID –≥—Ä—É–ø–∏ –∞–¥–º—ñ–Ω—ñ–≤; –∫–æ–º–∞–Ω–¥–∏ —ñ–∑ —Ü—å–æ–≥–æ —á–∞—Ç—É –ø—Ä–∏–π–º–∞—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.
- ADMINS ‚Äî –ø–µ—Ä–µ–ª—ñ–∫ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤‚Äë–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ (–∫–æ–º–∏).
- DB_PATH ‚Äî —à–ª—è—Ö –¥–æ SQLite‚Äë–±–∞–∑–∏ (default: news.db).
- SOURCES ‚Äî —Å–ø–∏—Å–æ–∫ RSS‚Äë–ø–æ—Å–∏–ª–∞–Ω—å (–∫–æ–º–∏). –Ø–∫—â–æ –ø–æ—Ä–æ–∂–Ω—ñ–π, –±—É–¥—É—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ fallback‚Äë—Å—Ç—Ä—ñ—á–∫–∏.
- MAX_ITEMS_PER_RUN ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–æ–≤–∏–Ω, —â–æ –∑–±–∏—Ä–∞—î—Ç—å—Å—è –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—É—Å–∫.
- SOURCES_YAML ‚Äî —à–ª—è—Ö –¥–æ YAML‚Äë–∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –¥–ª—è non‚ÄëRSS —Å–∫–∞–Ω–µ—Ä–∞ (default: sources.yaml).

–î–ª—è –∑–∞–ø—É—Å–∫—É:
1. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –∑ requirements.txt.
2. –ó–∞–ø–æ–≤–Ω—ñ—Ç—å .env –∞–±–æ –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.
3. –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Ñ–∞–π–ª: `python news_pipeline_bot.py`.
"""

import os
import sqlite3
import html as htmlmod
from datetime import datetime, timedelta, time as dtime
from zoneinfo import ZoneInfo

import feedparser
from bs4 import BeautifulSoup
from dotenv import load_dotenv

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, constants
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# ---------- –ö–æ–Ω—Ñ—ñ–≥ ----------

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")  # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ @channel –∞–±–æ -100xxxx
TIMEZONE = os.getenv("TIMEZONE", "Europe/Kyiv")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID", "").strip() or None
ADMINS = [int(x) for x in os.getenv("ADMINS", "").replace(" ", "").split(",") if x]
DB_PATH = os.getenv("DB_PATH", "news.db")

# –°—Ç—Ä—ñ—á–∫–∏ RSS (—á–µ—Ä–µ–∑ –∫–æ–º—É). –Ø–∫—â–æ –Ω–µ –∑–∞–¥–∞–Ω–æ –∞–±–æ –ø–æ—Ä–æ–∂–Ω—å–æ ‚Äî fallback
SOURCES_ENV = os.getenv("SOURCES", "")
RSS_SOURCES = [s.strip() for s in SOURCES_ENV.split(",") if s.strip()] or [
    "https://www.kmu.gov.ua/rss",
    "https://www.pfu.gov.ua/feed/",
    "https://mva.gov.ua/ua/rss.xml",
]

MAX_ITEMS_PER_RUN = int(os.getenv("MAX_ITEMS_PER_RUN", "10"))
SOURCES_YAML = os.getenv("SOURCES_YAML", "sources.yaml")

# –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ –ø—ñ–¥–∫–ª—é—á–∞—î–º–æ HTML‚Äë–∫–æ–ª–µ–∫—Ç–æ—Ä
try:
    from collectors_nonrss import collect_nonrss  # type: ignore
except Exception:
    collect_nonrss = None

TZ = ZoneInfo(TIMEZONE)


# ---------- –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö ----------

def db():
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn


def init_db():
    conn = db()
    c = conn.cursor()
    c.execute(
        """
        CREATE TABLE IF NOT EXISTS news (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          url TEXT UNIQUE,
          title TEXT,
          summary TEXT,
          source TEXT,
          published_at TEXT,
          status TEXT,
          created_at TEXT,
          approved_by INTEGER,
          scheduled_for TEXT,
          channel_message_id INTEGER
        )
        """
    )
    c.execute(
        """
        CREATE INDEX IF NOT EXISTS idx_news_status ON news(status);
        """
    )
    conn.commit()
    conn.close()


def add_item(url: str, title: str, summary: str, source: str, published_at: str):
    """
    –î–æ–¥–∞—î –µ–ª–µ–º–µ–Ω—Ç —É —Ç–∞–±–ª–∏—Ü—é news, —è–∫—â–æ —Ç–∞–∫–æ–≥–æ URL —â–µ –Ω–µ–º–∞—î.
    –ü–æ–≤–µ—Ä—Ç–∞—î id –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞ –∞–±–æ None, —è–∫—â–æ –¥—É–±–ª—ñ–∫–∞—Ç.
    """
    if not url or not title:
        return None
    conn = db()
    c = conn.cursor()
    try:
        c.execute(
            """
            INSERT INTO news (
                url, title, summary, source, published_at, status, created_at
            )
            VALUES (?, ?, ?, ?, ?, 'PENDING', ?)
            """,
            (
                url,
                title,
                summary,
                source,
                published_at,
                datetime.now(TZ).isoformat(),
            ),
        )
        conn.commit()
        return c.lastrowid
    except sqlite3.IntegrityError:
        # —Ü–µ–π URL –≤–∂–µ –±—É–≤
        return None
    finally:
        conn.close()


def get_next_pending():
    conn = db()
    c = conn.cursor()
    c.execute(
        "SELECT * FROM news WHERE status='PENDING' ORDER BY published_at DESC, id ASC LIMIT 1"
    )
    row = c.fetchone()
    conn.close()
    return row


def mark_status(
    item_id: int,
    status: str,
    approved_by: int | None = None,
    scheduled_for: str | None = None,
    channel_message_id: int | None = None,
):
    """
    –û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å –µ–ª–µ–º–µ–Ω—Ç–∞ —Ç–∞ –ø–æ–≤ º—è–∑–∞–Ω—ñ –ø–æ–ª—è (approved_by, scheduled_for, channel_message_id).
    """
    conn = db()
    c = conn.cursor()
    c.execute(
        """
        UPDATE news SET status=?,
                        approved_by=COALESCE(?, approved_by),
                        scheduled_for=COALESCE(?, scheduled_for),
                        channel_message_id=COALESCE(?, channel_message_id)
        WHERE id=?
        """,
        (status, approved_by, scheduled_for, channel_message_id, item_id),
    )
    conn.commit()
    conn.close()


# ---------- –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ----------

def build_post_text(row: sqlite3.Row) -> str:
    """–§–æ—Ä–º—É—î —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª—É."""
    title = htmlmod.escape(row["title"] or "")
    summary = row["summary"] or ""
    summary_plain = " ".join(BeautifulSoup(summary, "html.parser").stripped_strings)
    if len(summary_plain) > 750:
        summary_plain = summary_plain[:750].rstrip() + "‚Ä¶"
    summary_plain = htmlmod.escape(summary_plain)
    source = htmlmod.escape(row["source"] or "")
    url = row["url"]

    date_str = ""
    if row["published_at"]:
        try:
            dt = datetime.fromisoformat(row["published_at"])
            if dt.tzinfo is None:
                dt = dt.replace(tzinfo=TZ)
            date_str = dt.astimezone(TZ).strftime("%d.%m.%Y")
        except Exception:
            pass

    parts: list[str] = []
    if title:
        parts.append(f"<b>{title}</b>")
    if date_str or source:
        parts.append(f"<i>{source}{(' ¬∑ ' + date_str) if date_str else ''}</i>")
    if summary_plain:
        parts.append(summary_plain)
    parts.append(f"–î–∂–µ—Ä–µ–ª–æ: {url}")
    return "\n\n".join(parts)


def is_admin_context(update: Update) -> bool:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∞–≤–æ –Ω–∞ –∞–¥–º—ñ–Ω—Å—å–∫—ñ –¥—ñ—ó:
      - —è–∫—â–æ ADMIN_CHAT_ID –∑–∞–¥–∞–Ω–æ, –¥–æ–∑–≤–æ–ª—è—î –∫–æ–º–∞–Ω–¥–∏ –∑ —Ü—å–æ–≥–æ —á–∞—Ç—É;
      - —è–∫—â–æ ADMINS –º–∞—î —Å–ø–∏—Å–æ–∫ —á–∏—Å–ª–æ–≤–∏—Ö ID, –¥–æ–∑–≤–æ–ª—è—î –∫–æ–º–∞–Ω–¥–∏ –≤—ñ–¥ —Ü–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤;
      - —è–∫—â–æ –∂–æ–¥–µ–Ω –Ω–µ –∑–∞–¥–∞–Ω–æ (dev‚Äë—Ä–µ–∂–∏–º) ‚Äî –¥–æ–∑–≤–æ–ª—è—î –≤—Å—ñ–º.
    """
    try:
        # –ì—Ä—É–ø–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
        if ADMIN_CHAT_ID and str(update.effective_chat.id) == str(ADMIN_CHAT_ID):
            return True
        # –Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏
        uid = update.effective_user.id if update.effective_user else None
        if ADMINS and uid and uid in ADMINS:
            return True
        # –Ø–∫—â–æ –Ω–µ –∑–∞–¥–∞–Ω–æ –∂–æ–¥–Ω–æ—ó —É–º–æ–≤–∏ ‚Äî –∑–∞ –ø—Ä–æ–º–æ–≤—á–∞–Ω–Ω—è–º True
        if not ADMIN_CHAT_ID and not ADMINS:
            return True
        return False
    except Exception:
        return False


async def send_review_card(context: ContextTypes.DEFAULT_TYPE, row: sqlite3.Row) -> None:
    """
    –ù–∞–¥—Å–∏–ª–∞—î –∫–∞—Ä—Ç–∫—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó —É –≤—Å—ñ –∞–¥–º—ñ–Ω‚Äë—á–∞—Ç–∏.
    """
    kb = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(
                    "‚úÖ –ü—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –∑–∞—Ä–∞–∑",
                    callback_data=f"approve_now:{row['id']}",
                ),
                InlineKeyboardButton(
                    "üïò –ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ 09:00",
                    callback_data=f"approve_0900:{row['id']}",
                ),
            ],
            [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data=f"skip:{row['id']}")],
            [InlineKeyboardButton("üóë –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject:{row['id']}")],
        ]
    )
    text = build_post_text(row)

    targets: list[str | int] = []
    if ADMIN_CHAT_ID:
        targets = [ADMIN_CHAT_ID]
    elif ADMINS:
        targets = ADMINS  # type: ignore[assignment]
    else:
        return

    for chat_id in targets:
        try:
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"üì∞ <b>–î–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏</b> (#{row['id']})\n\n{text}",
                parse_mode=constants.ParseMode.HTML,
                disable_web_page_preview=False,
                reply_markup=kb,
            )
        except Exception as e:
            print("admin send error:", e)


# ---------- –ó–±—ñ—Ä –Ω–æ–≤–∏–Ω ----------

def parse_feed(url: str) -> list[dict]:
    """–ü–∞—Ä—Å–∏—Ç—å RSS‚Äë—Å—Ç—Ä—ñ—á–∫—É —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤."""
    try:
        fp = feedparser.parse(url)
        items: list[dict] = []
        src_title = fp.feed.get("title", "") if getattr(fp, "feed", None) else ""
        for e in fp.entries:
            link = e.get("link")
            title = e.get("title")
            summary = e.get("summary") or e.get("description") or ""

            # –î–∞—Ç–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó
            if e.get("published_parsed"):
                published = datetime(*e.published_parsed[:6], tzinfo=TZ).isoformat()
            elif e.get("updated_parsed"):
                published = datetime(*e.updated_parsed[:6], tzinfo=TZ).isoformat()
            else:
                published = datetime.now(TZ).isoformat()

            items.append(
                {
                    "url": link,
                    "title": title,
                    "summary": summary,
                    "source": src_title,
                    "published_at": published,
                }
            )
        return items
    except Exception as e:
        print("feed error", url, e)
        return []


async def collect_job(context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∏–π –¥–∂–æ–± –¥–ª—è –∑–±–æ—Ä—É –Ω–æ–≤–∏–Ω:
    - –ø—Ä–æ—Ö–æ–¥–∏—Ç—å—Å—è –ø–æ RSS_SOURCES, –¥–æ–¥–∞—î –Ω–æ–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏;
    - –ø–æ—Ç—ñ–º (–∑–∞ –ø–æ—Ç—Ä–µ–±–∏) —Å–∫–∞–Ω—É—î HTML‚Äë–¥–∂–µ—Ä–µ–ª–∞ —á–µ—Ä–µ–∑ collect_nonrss.
    –ü—ñ—Å–ª—è –∑–±–æ—Ä—É –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–µ—Ä—à—É –∫–∞—Ä—Ç–∫—É —É —á–µ—Ä–∑—ñ.
    """
    added = 0

    # 1) RSS
    for src in RSS_SOURCES:
        for itm in parse_feed(src):
            if not itm.get("url") or not itm.get("title"):
                continue
            inserted_id = add_item(
                itm["url"], itm["title"], itm["summary"], itm["source"], itm["published_at"]
            )
            if inserted_id:
                added += 1
                if added >= MAX_ITEMS_PER_RUN:
                    break
        if added >= MAX_ITEMS_PER_RUN:
            break

    # 2) HTML‚Äë–¥–∂–µ—Ä–µ–ª–∞ (—è–∫—â–æ —î –∫–æ–ª–µ–∫—Ç–æ—Ä)
    if collect_nonrss and added < MAX_ITEMS_PER_RUN:
        try:
            remaining = MAX_ITEMS_PER_RUN - added
            for itm in collect_nonrss(SOURCES_YAML, TZ, remaining=remaining):
                if not itm.get("url") or not itm.get("title"):
                    continue
                inserted_id = add_item(
                    itm["url"],
                    itm["title"],
                    itm.get("summary", ""),
                    itm.get("source", ""),
                    itm.get("published_at") or datetime.now(TZ).isoformat(),
                )
                if inserted_id:
                    added += 1
                    if added >= MAX_ITEMS_PER_RUN:
                        break
        except Exception as e:
            print("nonrss error:", e)

    # –ü—ñ—Å–ª—è –∑–±–æ—Ä—É ‚Äî –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–µ—Ä—à—É –∫–∞—Ä—Ç–∫—É
    if added:
        row = get_next_pending()
        if row:
            await send_review_card(context, row)


# ---------- –ü–æ—à—É–∫ —Ç–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω–∏ ----------

def parse_date_args(args: list[str]):
    """
    –ü—Ä–∏–π–º–∞—î —Å–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∑ context.args) —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î
    (start_dt, end_dt_exclusive) —É TZ. –ü—ñ–¥—Ç—Ä–∏–º—É—î:
      ‚Ä¢ YYYY-MM-DD
      ‚Ä¢ YYYY-MM-DD..YYYY-MM-DD
      ‚Ä¢ YYYY-MM-DD YYYY-MM-DD
    –Ø–∫—â–æ end < start, –º—ñ–Ω—è—î —ó—Ö –º—ñ—Å—Ü—è–º–∏.
    """
    if not args:
        raise ValueError("no args")
    raw = " ".join(args).strip()
    if ".." in raw:
        a, b = [x.strip() for x in raw.split("..", 1)]
    else:
        parts = raw.split()
        a = parts[0]
        b = parts[1] if len(parts) > 1 else parts[0]
    d1 = datetime.strptime(a, "%Y-%m-%d").date()
    d2 = datetime.strptime(b, "%Y-%m-%d").date()
    if d2 < d1:
        d1, d2 = d2, d1
    start = datetime.combine(d1, dtime.min.replace(tzinfo=TZ))
    end_excl = datetime.combine(d2, dtime.max.replace(tzinfo=TZ)) + timedelta(seconds=1)
    return start, end_excl


def find_items_by_date(start_dt: datetime, end_dt_excl: datetime, statuses=("PENDING",)):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–∏–Ω –∑ –ë–î –∑—ñ —Å—Ç–∞—Ç—É—Å–∞–º–∏ —ñ–∑ `statuses` —ñ –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º –¥–∞—Ç.
    –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π –ø–æ published_at DESC, id ASC.
    """
    conn = db()
    c = conn.cursor()
    q = f"""
        SELECT * FROM news
        WHERE status IN ({','.join('?' * len(statuses))})
          AND published_at >= ?
          AND published_at < ?
        ORDER BY published_at DESC, id ASC
    """
    params = list(statuses) + [start_dt.isoformat(), end_dt_excl.isoformat()]
    c.execute(q, params)
    rows = c.fetchall()
    conn.close()
    return rows


def _parse_range_str(s: str):
    """
    –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è: –æ—Ç—Ä–∏–º—É—î —Ä—è–¥–æ–∫ –¥—ñ–∞–ø–∞–∑–æ–Ω—É (—Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD –∞–±–æ
    YYYY-MM-DD..YYYY-MM-DD) —ñ –ø–æ–≤–µ—Ä—Ç–∞—î (start_dt, end_dt_exclusive).
    """
    s = s.strip()
    if ".." in s:
        a, b = [x.strip() for x in s.split("..", 1)]
    else:
        a = b = s
    d1 = datetime.strptime(a, "%Y-%m-%d").date()
    d2 = datetime.strptime(b, "%Y-%m-%d").date()
    if d2 < d1:
        d1, d2 = d2, d1
    start = datetime.combine(d1, dtime.min.replace(tzinfo=TZ))
    end_excl = datetime.combine(d2, dtime.max.replace(tzinfo=TZ)) + timedelta(seconds=1)
    return start, end_excl


# ---------- –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è ----------

async def publish_item_by_id(context: ContextTypes.DEFAULT_TYPE, item_id: int) -> None:
    """
    –ü—É–±–ª—ñ–∫—É—î –Ω–æ–≤–∏–Ω—É –≤ CHANNEL_ID —ñ –∑–º—ñ–Ω—é—î —Å—Ç–∞—Ç—É—Å –Ω–∞ PUBLISHED.
    """
    conn = db()
    c = conn.cursor()
    c.execute("SELECT * FROM news WHERE id=?", (item_id,))
    row = c.fetchone()
    conn.close()
    if not row:
        return
    text = build_post_text(row)
    msg = await context.bot.send_message(
        chat_id=CHANNEL_ID,
        text=text,
        parse_mode=constants.ParseMode.HTML,
        disable_web_page_preview=False,
    )
    mark_status(item_id, "PUBLISHED", channel_message_id=msg.message_id)


async def publish_item_job(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–ª–±–µ–∫ –¥–ª—è JobQueue: –≤–∏–∫–ª–∏–∫–∞—î publish_item_by_id –∑ context.job.data.item_id"""
    data = context.job.data or {}
    item_id = data.get("item_id")
    if item_id:
        await publish_item_by_id(context, item_id)


async def schedule_0900(context: ContextTypes.DEFAULT_TYPE, item_id: int) -> None:
    """–ü–ª–∞–Ω—É—î –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é –Ω–∞ –Ω–∞–π–±–ª–∏–∂—á–µ 09:00 (Europe/Kyiv)."""
    now = datetime.now(TZ)
    target = datetime.combine(now.date(), dtime(9, 0, tzinfo=TZ))
    if target < now:
        target += timedelta(days=1)
    delay = (target - now).total_seconds()
    context.job_queue.run_once(
        publish_item_job,
        when=delay,
        data={"item_id": item_id},
        name=f"publish_{item_id}",
    )
    mark_status(item_id, "APPROVED", scheduled_for=target.isoformat())


# ---------- –ö–æ–º–∞–Ω–¥–∏ ----------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî –±–æ—Ç –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –Ω–æ–≤–∏–Ω. –ö–æ–º–∞–Ω–¥–∏:\n"
        "/collect ‚Äî –∑—ñ–±—Ä–∞—Ç–∏ –Ω–æ–≤–∏–Ω–∏ –∑–∞—Ä–∞–∑\n"
        "/review ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω—É –Ω–æ–≤–∏–Ω—É –¥–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏\n"
        "/search YYYY-MM-DD[..YYYY-MM-DD] ‚Äî –∑–Ω–∞–π—Ç–∏ –Ω–æ–≤–∏–Ω–∏ –∑–∞ –¥–∞—Ç–æ—é\n"
        "/collect_range YYYY-MM-DD[..YYYY-MM-DD] ‚Äî –∑—ñ–±—Ä–∞—Ç–∏ –Ω–æ–≤–∏–Ω–∏ –∑–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º –¥–∞—Ç"
    )


async def review(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin_context(update):
        return await update.message.reply_text("–î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤.")
    row = get_next_pending()
    if not row:
        return await update.message.reply_text("–ù–µ–º–∞—î –Ω–æ–≤–∏—Ö –Ω–æ–≤–∏–Ω —É —á–µ—Ä–∑—ñ.")
    await send_review_card(context, row)


async def collect(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin_context(update):
        return await update.message.reply_text("–î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤.")
    await collect_job(context)
    await update.message.reply_text("–ó–±—ñ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —á–µ—Ä–≥—É: /review")


async def collect_range_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /collect_range ‚Äî –∑–±–∏—Ä–∞—î –Ω–æ–≤–∏–Ω–∏ –∑ HTML‚Äë–¥–∂–µ—Ä–µ–ª –∑–∞ –∑–∞–¥–∞–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç.
    –§–æ—Ä–º–∞—Ç–∏: YYYY-MM-DD –∞–±–æ YYYY-MM-DD..YYYY-MM-DD.
    """
    if not is_admin_context(update):
        return await update.message.reply_text("–î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤.")
    if not context.args:
        return await update.message.reply_text(
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:\n"
            "/collect_range YYYY-MM-DD\n"
            "/collect_range YYYY-MM-DD..YYYY-MM-DD"
        )
    if collect_nonrss is None:
        return await update.message.reply_text("non-RSS —Å–∫–∞–Ω–µ—Ä –Ω–µ —É–≤—ñ–º–∫–Ω–µ–Ω–æ –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π.")
    try:
        start_dt, end_excl = _parse_range_str(" ".join(context.args))
    except Exception:
        return await update.message.reply_text(
            "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–∫–ª–∞–¥: 2025-09-01 –∞–±–æ 2025-09-01..2025-09-05"
        )
    added = 0
    try:
        # –∑–±—ñ–ª—å—à—É—î–º–æ –ª–∏–º—ñ—Ç, —â–æ–± –∑–∞ –æ–¥–∏–Ω –≤–∏–∫–ª–∏–∫ –≤—ñ–¥—Å–∫–∞–Ω—É–≤–∞—Ç–∏ –±—ñ–ª—å—à–µ —Å—Ç–æ—Ä—ñ–Ω–æ–∫
        for itm in collect_nonrss(
            SOURCES_YAML,
            TZ,
            remaining=MAX_ITEMS_PER_RUN * 3,
            date_from=start_dt,
            date_to=end_excl,
        ):
            inserted_id = add_item(
                itm["url"],
                itm["title"],
                itm.get("summary", ""),
                itm.get("source", ""),
                itm.get("published_at", datetime.now(TZ).isoformat()),
            )
            if inserted_id:
                added += 1
            if added >= MAX_ITEMS_PER_RUN:
                break
    except Exception as e:
        print("collect_range error:", e)
    if not added:
        return await update.message.reply_text("–ó–∞ –≤–∏–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    # –ø—ñ—Å–ª—è –∑–±–æ—Ä—É ‚Äî –≤—ñ–¥—ñ—Å–ª–∞—î–º–æ –ø–µ—Ä—à—É –∫–∞—Ä—Ç–∫—É
    row = get_next_pending()
    if row:
        await send_review_card(context, row)
    return await update.message.reply_text(f"–î–æ–¥–∞–Ω–æ –¥–æ —á–µ—Ä–≥–∏: {added}. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ: /review")


async def search_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin_context(update):
        return await update.message.reply_text("–î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤.")
    if not context.args:
        return await update.message.reply_text(
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:\n"
            "/search YYYY-MM-DD\n"
            "/search YYYY-MM-DD..YYYY-MM-DD\n"
            "/search YYYY-MM-DD YYYY-MM-DD"
        )
    try:
        start_dt, end_excl = parse_date_args(context.args)
    except Exception:
        return await update.message.reply_text(
            "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ: 2025-09-05 –∞–±–æ 2025-09-01..2025-09-05"
        )
    rows = find_items_by_date(start_dt, end_excl, statuses=("PENDING",))
    if not rows:
        return await update.message.reply_text("–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —á–µ—Ä–∑—ñ –∑–∞ —Ü–µ–π –ø–µ—Ä—ñ–æ–¥.")
    await update.message.reply_text(f"–ó–Ω–∞–π–¥–µ–Ω–æ: {len(rows)}. –ù–∞–¥—Å–∏–ª–∞—é –ø–µ—Ä—à—É –∫–∞—Ä—Ç–∫—É‚Ä¶")
    await send_review_card(context, rows[0])


async def mention_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—É—î –ø–∞–Ω–µ–ª—å —à–≤–∏–¥–∫–∏—Ö –¥—ñ–π, —è–∫—â–æ —É –≥—Ä—É–ø—ñ –∑–≥–∞–¥–∞–ª–∏ –±–æ—Ç–∞."""
    msg = update.message
    if not msg or msg.chat.type not in ("group", "supergroup"):
        return
    if not is_admin_context(update):
        return
    botname = "@" + (context.bot.username or "")
    if botname.lower() not in (msg.text or "").lower():
        return
    kb = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("‚ö° –ó—ñ–±—Ä–∞—Ç–∏ –∑–∞—Ä–∞–∑", callback_data="q_collect")],
            [InlineKeyboardButton("üóÇ –ü–æ–∫–∞–∑–∞—Ç–∏ —á–µ—Ä–≥—É", callback_data="q_review")],
            [InlineKeyboardButton("üîé –ü–æ—à—É–∫ –∑–∞ –¥–∞—Ç–æ—é", callback_data="q_search_menu")],
        ]
    )
    await msg.reply_text("–©–æ –∑—Ä–æ–±–∏—Ç–∏? ‚Üì", reply_markup=kb)


async def cb_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    await q.answer()
    data = q.data or ""
    # --- –¥—ñ—ó –±–µ–∑ item_id ---
    if data in {"q_collect", "q_review", "q_search_menu", "q_search_today", "q_search_yest", "q_search_7d"}:
        if data == "q_collect":
            if not is_admin_context(update):
                return await q.edit_message_text("–î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤.")
            await collect_job(context)
            return await q.edit_message_text("–ó–±—ñ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ: /review")
        if data == "q_review":
            if not is_admin_context(update):
                return await q.edit_message_text("–î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤.")
            row = get_next_pending()
            if not row:
                return await q.edit_message_text("–ß–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è.")
            await send_review_card(context, row)
            try:
                await q.edit_message_text("–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞—Å—Ç—É–ø–Ω—É –∫–∞—Ä—Ç–∫—É –≤ –∞–¥–º—ñ–Ω‚Äë—á–∞—Ç.")
            except Exception:
                pass
            return
        if data == "q_search_menu":
            kb = InlineKeyboardMarkup(
                [
                    [InlineKeyboardButton("–°—å–æ–≥–æ–¥–Ω—ñ", callback_data="q_search_today")],
                    [InlineKeyboardButton("–í—á–æ—Ä–∞", callback_data="q_search_yest")],
                    [InlineKeyboardButton("–û—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤", callback_data="q_search_7d")],
                ]
            )
            return await q.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ–∞–ø–∞–∑–æ–Ω:", reply_markup=kb)
        if data in {"q_search_today", "q_search_yest", "q_search_7d"}:
            now = datetime.now(TZ).date()
            if data == "q_search_today":
                d1 = d2 = now
            elif data == "q_search_yest":
                d1 = d2 = now - timedelta(days=1)
            else:
                d1, d2 = now - timedelta(days=6), now
            start_dt = datetime.combine(d1, dtime.min.replace(tzinfo=TZ))
            end_dt_excl = datetime.combine(d2, dtime.max.replace(tzinfo=TZ)) + timedelta(seconds=1)
            rows = find_items_by_date(start_dt, end_dt_excl, statuses=("PENDING",))
            if not rows:
                return await q.edit_message_text("–ó–∞ –≤–∏–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            await q.edit_message_text(f"–ó–Ω–∞–π–¥–µ–Ω–æ: {len(rows)}. –ù–∞–¥—Å–∏–ª–∞—é –ø–µ—Ä—à—É –∫–∞—Ä—Ç–∫—É‚Ä¶")
            await send_review_card(context, rows[0])
            return

    # --- –¥—ñ—ó –∑ item_id ---
    try:
        action, id_str = data.split(":")
        item_id = int(id_str)
    except Exception:
        return await q.edit_message_text("–ü–æ–º–∏–ª–∫–∞ –¥—ñ—ó.")
    user_id = update.effective_user.id if update.effective_user else None
    if action == "approve_now":
        mark_status(item_id, "APPROVED", approved_by=user_id)
        await publish_item_by_id(context, item_id)
        await q.edit_message_text("‚úÖ –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª.")
        row = get_next_pending()
        if row:
            await send_review_card(context, row)
    elif action == "approve_0900":
        mark_status(item_id, "APPROVED", approved_by=user_id)
        await schedule_0900(context, item_id)
        await q.edit_message_text("üïò –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –Ω–∞ 09:00 (–ö–∏—ó–≤).")
        row = get_next_pending()
        if row:
            await send_review_card(context, row)
    elif action == "reject":
        mark_status(item_id, "REJECTED", approved_by=user_id)
        await q.edit_message_text("üóë –í—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
        row = get_next_pending()
        if row:
            await send_review_card(context, row)
    elif action == "skip":
        # –≤—ñ–¥—Å—É–Ω—É—Ç–∏ –≤ —á–µ—Ä–∑—ñ, –æ–Ω–æ–≤–∏–≤—à–∏ created_at
        conn = db()
        c = conn.cursor()
        c.execute(
            "UPDATE news SET created_at=? WHERE id=?",
            (datetime.now(TZ).isoformat(), item_id),
        )
        conn.commit()
        conn.close()
        await q.edit_message_text("‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–∑–∞–ª–∏—à–∏–ª–æ—Å—å —É —á–µ—Ä–∑—ñ).")
        row = get_next_pending()
        if row:
            await send_review_card(context, row)


# ---------- –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª ----------

def main() -> None:
    init_db()
    if not BOT_TOKEN or not CHANNEL_ID:
        raise SystemExit("Set BOT_TOKEN and CHANNEL_ID in .env")
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    # –ö–æ–º–∞–Ω–¥–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("review", review))
    app.add_handler(CommandHandler("collect", collect))
    app.add_handler(CommandHandler("collect_range", collect_range_cmd))
    app.add_handler(CommandHandler("search", search_cmd))
    # –ü–∞–Ω–µ–ª—å –ø—Ä–∏ –∑–≥–∞–¥—Ü—ñ —É –≥—Ä—É–ø—ñ
    app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.GROUPS, mention_panel))
    # –ö–Ω–æ–ø–∫–∏ –∑ inline‚Äëcallback
    app.add_handler(CallbackQueryHandler(cb_handler))
    # –©–æ–¥–µ–Ω–Ω–∏–π –∞–≤—Ç–æ–∑–±—ñ—Ä –æ 08:45 (–ö–∏—ó–≤)
    app.job_queue.run_daily(collect_job, time=dtime(8, 45, tzinfo=TZ), name="collect_daily")
    print("Bot started. Press Ctrl+C to stop.")
    app.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()